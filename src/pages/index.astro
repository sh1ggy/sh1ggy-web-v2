---
import Layout from "../layouts/Layout.astro";
import About from "../components/About.jsx";
import Experience from "../components/Experience";
import Skills from "../components/Skills";
import Projects from "../components/Projects";
import Hackathons from "../components/Hackathons";
import "../styles.css";
---

<Layout title="sh1ggy-web">
  <div class="flex flex-col lg:h-screen lg:w-auto overflow-y w-screen">
    <main class="flex flex-col flex-grow">
      <section class="space-y-96">
        <div tabindex="-1" class="fade fadeOut">
          <About client:visible />
        </div>
        <div tabindex="-1" id="exp" class="fade fadeOut w-full">
          <Experience client:visible />
        </div>
        <div tabindex="-1" id="skills" class="fade fadeOut scroll-my-24 w-full">
          <Skills client:visible />
        </div>
        <div tabindex="-1" id="proj" class="fade fadeOut scroll-my-24 w-full">
          <Projects client:load />
        </div>
        <div
          tabindex="-1"
          id="hack"
          class="lg:fade lg:fadeOut scroll-my-24 w-full"
        >
          <Hackathons client:visible />
        </div>
      </section>
    </main>
    <!-- FOOTER -->
    <footer
      class="flex items-center rounded-t-xl p-6 w-full shadow-lg justify-center text-neutral-50"
    >
        {"Designed & Built with <3 by Tyrone Nolasco"}
    </footer>
  </div>
  <script>
    // Scroll handling
    if (history.scrollRestoration) {
      history.scrollRestoration = "manual";
    }

    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();

        const targetId = this.getAttribute("href").substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          const containerElement = targetElement.parentElement;
          const targetOffsetLeft = targetElement.offsetLeft;

          containerElement.scrollTo({
            left: targetOffsetLeft,
            behavior: "smooth",
          });
        }
      });
    });

    // Fade animation handling
    const observerOptions = {
      root: null,
      rootMargin: "0px",
      threshold: 0.2,
    };

    function observerCallback(entries, observer) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // fade in observed elements that are in view
          entry.target.classList.replace("fadeOut", "fadeIn");
        } else {
          // fade out observed elements that are not in view
          entry.target.classList.replace("fadeIn", "fadeOut");
        }
      });
    }

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions
    );

    const fadeElms = document.querySelectorAll(".fade");
    fadeElms.forEach((el) => observer.observe(el));
  </script>
</Layout>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  .fade {
    transition: opacity 1s ease-in-out;
  }
  .fadeOut {
    opacity: 0;
  }
  .fadeIn {
    opacity: 1;
  }
  html {
    scroll-snap-type: y mandatory;
    scroll-behavior: smooth;
  }
  main {
    background-color: theme("colors.page");
  }
  h1 {
    font-family: theme("fontFamily.signika");
  }
  h2,
  h3 {
    font-family: theme("fontFamily.mukta");
  }
  p {
    background-color: theme("colors.body");
    font-family: theme("fontFamily.ubuntu");
  }
  strong {
    font-family: theme("fontFamily.signika");
  }
</style>
